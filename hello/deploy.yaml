apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    autoscaling.knative.dev/scale-to-zero-pod-retention-period: 0s
    autoscaling.knative.dev/window: 12s
    deployment.kubernetes.io/revision: "1"
    serving.knative.dev/creator: kubernetes-admin
  creationTimestamp: "2024-03-12T12:36:57Z"
  generation: 2
  labels:
    app: hello-00001
    serving.knative.dev/configuration: hello
    serving.knative.dev/configurationGeneration: "1"
    serving.knative.dev/configurationUID: 7e852c09-4a75-43d9-96f2-8604e2e75a86
    serving.knative.dev/revision: hello-00001
    serving.knative.dev/revisionUID: 36adffa1-5dbe-44aa-921d-79c8abd8d0ff
    serving.knative.dev/service: hello
    serving.knative.dev/serviceUID: dacb2b8d-9068-4b87-85dc-b74ad63e7f15
  name: hello-00001-deployment
  namespace: default
  ownerReferences:
  - apiVersion: serving.knative.dev/v1
    blockOwnerDeletion: true
    controller: true
    kind: Revision
    name: hello-00001
    uid: 36adffa1-5dbe-44aa-921d-79c8abd8d0ff
  resourceVersion: "90115251"
  uid: 3dbebd2f-765c-4bff-af8e-816a1d64e5f3
spec:
  progressDeadlineSeconds: 600
  replicas: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      serving.knative.dev/revisionUID: 36adffa1-5dbe-44aa-921d-79c8abd8d0ff
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/scale-to-zero-pod-retention-period: 0s
        autoscaling.knative.dev/window: 12s
        serving.knative.dev/creator: kubernetes-admin
      creationTimestamp: null
      labels:
        app: hello-00001
        serving.knative.dev/configuration: hello
        serving.knative.dev/configurationGeneration: "1"
        serving.knative.dev/configurationUID: 7e852c09-4a75-43d9-96f2-8604e2e75a86
        serving.knative.dev/revision: hello-00001
        serving.knative.dev/revisionUID: 36adffa1-5dbe-44aa-921d-79c8abd8d0ff
        serving.knative.dev/service: hello
        serving.knative.dev/serviceUID: dacb2b8d-9068-4b87-85dc-b74ad63e7f15
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - node1
                - node3
      containers:
      - env:
        - name: TARGET
          value: Konnichiwa >o<''
        - name: PORT
          value: "8080"
        - name: K_REVISION
          value: hello-00001
        - name: K_CONFIGURATION
          value: hello
        - name: K_SERVICE
          value: hello
        image: index.docker.io/daohiep22/helloworld-python@sha256:f968099d03386e71dde9c49ee88cb28da6f737d58717ca79117a286e10df396e
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            httpGet:
              path: /wait-for-drain
              port: 8022
              scheme: HTTP
        name: user-container
        ports:
        - containerPort: 8080
          name: user-port
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
      - env:
        - name: SERVING_NAMESPACE
          value: default
        - name: SERVING_SERVICE
          value: hello
        - name: SERVING_CONFIGURATION
          value: hello
        - name: SERVING_REVISION
          value: hello-00001
        - name: QUEUE_SERVING_PORT
          value: "8012"
        - name: QUEUE_SERVING_TLS_PORT
          value: "8112"
        - name: CONTAINER_CONCURRENCY
          value: "0"
        - name: REVISION_TIMEOUT_SECONDS
          value: "300"
        - name: REVISION_RESPONSE_START_TIMEOUT_SECONDS
          value: "0"
        - name: REVISION_IDLE_TIMEOUT_SECONDS
          value: "0"
        - name: SERVING_POD
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: SERVING_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: SERVING_LOGGING_CONFIG
        - name: SERVING_LOGGING_LEVEL
        - name: SERVING_REQUEST_LOG_TEMPLATE
          value: '{"httpRequest": {"requestMethod": "{{.Request.Method}}", "requestUrl":
            "{{js .Request.RequestURI}}", "requestSize": "{{.Request.ContentLength}}",
            "status": {{.Response.Code}}, "responseSize": "{{.Response.Size}}", "userAgent":
            "{{js .Request.UserAgent}}", "remoteIp": "{{js .Request.RemoteAddr}}",
            "serverIp": "{{.Revision.PodIP}}", "referer": "{{js .Request.Referer}}",
            "latency": "{{.Response.Latency}}s", "protocol": "{{.Request.Proto}}"},
            "traceId": "{{index .Request.Header "X-B3-Traceid"}}"}'
        - name: SERVING_ENABLE_REQUEST_LOG
          value: "false"
        - name: SERVING_REQUEST_METRICS_BACKEND
          value: prometheus
        - name: SERVING_REQUEST_METRICS_REPORTING_PERIOD_SECONDS
          value: "5"
        - name: TRACING_CONFIG_BACKEND
          value: none
        - name: TRACING_CONFIG_ZIPKIN_ENDPOINT
        - name: TRACING_CONFIG_DEBUG
          value: "false"
        - name: TRACING_CONFIG_SAMPLE_RATE
          value: "0.1"
        - name: USER_PORT
          value: "8080"
        - name: SYSTEM_NAMESPACE
          value: knative-serving
        - name: METRICS_DOMAIN
          value: knative.dev/internal/serving
        - name: SERVING_READINESS_PROBE
          value: '{"tcpSocket":{"port":8080,"host":"127.0.0.1"},"successThreshold":1}'
        - name: ENABLE_PROFILING
          value: "false"
        - name: SERVING_ENABLE_PROBE_REQUEST_LOG
          value: "false"
        - name: METRICS_COLLECTOR_ADDRESS
        - name: HOST_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: ENABLE_HTTP2_AUTO_DETECTION
          value: "false"
        - name: ROOT_CA
        image: gcr.io/knative-releases/knative.dev/serving/cmd/queue@sha256:7f1dd4cce2f85d31be8350420a528cc5c7d8b1bf5979ec77c29dc1293f82dc83
        imagePullPolicy: IfNotPresent
        name: queue-proxy
        ports:
        - containerPort: 8022
          name: http-queueadm
          protocol: TCP
        - containerPort: 9090
          name: http-autometric
          protocol: TCP
        - containerPort: 9091
          name: http-usermetric
          protocol: TCP
        - containerPort: 8012
          name: queue-port
          protocol: TCP
        - containerPort: 8112
          name: https-port
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            httpHeaders:
            - name: K-Network-Probe
              value: queue
            path: /
            port: 8012
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 25m
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 300
status:
  conditions:
  - lastTransitionTime: "2024-03-12T12:37:08Z"
    lastUpdateTime: "2024-03-12T12:37:08Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2024-03-12T12:36:57Z"
    lastUpdateTime: "2024-03-12T12:37:08Z"
    message: ReplicaSet "hello-00001-deployment-5c89cf77cb" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 2
